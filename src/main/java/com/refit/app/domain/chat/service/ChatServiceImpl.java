package com.refit.app.domain.chat.service;

import com.refit.app.domain.chat.dto.request.ChatSendRequest;
import com.refit.app.domain.chat.dto.response.ChatMessageResponse;
import com.refit.app.domain.chat.mapper.ChatMapper;
import java.util.HashMap;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

@Service
@RequiredArgsConstructor
public class ChatServiceImpl implements ChatService {

    private final ChatMapper chatMapper;

    @Transactional
    @Override
    public ChatMessageResponse saveMessage(Long memberId, ChatSendRequest req) {
        // 0) 기본 검증
        if (memberId == null) {
            throw new AccessDeniedException("login required");
        }
        if (req == null || req.getCategoryId() == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "categoryId required");
        }
        if (req.getMessage() == null || req.getMessage().isBlank()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "message required");
        }

        // 1) MyBatis 파라미터 구성
        Map<String, Object> param = new HashMap<>();
        param.put("req", req);
        param.put("memberId", memberId);

        // 2) INSERT (selectKey로 chatId 생성)
        chatMapper.insertFromRequest(param);

        // 3) selectKey로 생성된 chatId 회수
        Long chatId = (Long) param.get("chatId");
        if (chatId == null) {
            throw new IllegalStateException("chatId was not generated by selectKey");
        }

        // 4) 방금 저장한 레코드 + 닉네임 조인 조회
        ChatMessageResponse saved = chatMapper.findByIdWithNickname(chatId);
        if (saved == null) {
            throw new IllegalStateException("inserted message not found: id=" + chatId);
        }

        return saved;
    }
}
