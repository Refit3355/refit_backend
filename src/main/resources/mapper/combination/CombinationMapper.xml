<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.refit.app.domain.combination.mapper.CombinationMapper">

    <!-- 조합 기본 정보 조회 -->
    <select id="findCombinationById" parameterType="long" resultType="com.refit.app.domain.combination.dto.response.MyCombinationResponse">
        SELECT
            c.COMBINATION_ID   AS combinationId,
            c.COMBINATION_NAME AS combinationName,
            c.COMBINATION_DESCRIPTION AS combinationDescription
        FROM COMBINATION c
        WHERE c.COMBINATION_ID = #{combinationId}
    </select>

    <!-- 여러 조합 조회 -->
    <select id="findCombinationsByIds" resultType="com.refit.app.domain.me.dto.MyCombinationDto">
        SELECT
        c.COMBINATION_ID   AS combinationId,
        c.MEMBER_ID        AS memberId,
        m.NICKNAME         AS nickname,
        m.PROFILE_URL      AS profileUrl,
        c.COMBINATION_NAME AS combinationName,
        c.LIKES            AS likes
        FROM COMBINATION c
        JOIN MEMBER m ON c.MEMBER_ID = m.MEMBER_ID
        WHERE c.COMBINATION_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND c.DELETED_AT IS NULL
        ORDER BY c.COMBINATION_ID DESC
    </select>


    <!-- 조합에 속한 상품 목록 조회 -->
    <select id="findProductsByCombinationId" parameterType="long" resultType="com.refit.app.domain.combination.dto.CombinationProductDto">
        SELECT
            p.PRODUCT_ID    AS productId,
            p.PRODUCT_NAME  AS productName,
            p.BRAND_NAME    AS brandName,
            p.PRICE         AS price,
            p.DISCOUNT_RATE AS discountRate,
            p.THUMBNAIL_URL AS thumbnailUrl
        FROM COMBINATION_ITEM ci
                 JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
        WHERE ci.COMBINATION_ID = #{combinationId}
        ORDER BY ci.COMBINATION_ITEM_ID
    </select>

    <!-- 조합 좋아요 증가 -->
    <update id="increaseLike">
        UPDATE COMBINATION
        SET LIKES = LIKES + 1,
            UPDATED_AT = SYSTIMESTAMP
        WHERE COMBINATION_ID = #{combinationId}
    </update>

    <!-- 조합 좋아요 감소 -->
    <update id="decreaseLike">
        UPDATE COMBINATION
        SET LIKES = CASE WHEN LIKES > 0 THEN LIKES - 1 ELSE 0 END,
            UPDATED_AT = SYSTIMESTAMP
        WHERE COMBINATION_ID = #{combinationId}
    </update>

    <!-- 조합 조회 -->
    <select id="findCombinations"
            parameterType="map"
            resultType="com.refit.app.domain.combination.dto.CombinationResponseDto">
        SELECT
        c.COMBINATION_ID     AS combinationId,
        c.COMBINATION_NAME   AS combinationName,
        c.LIKES              AS likes,
        c.CREATED_AT         AS createdAt,
        (
        SELECT SUM(p.PRICE)
        FROM COMBINATION_ITEM ci
        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
        ) AS originalTotalPrice,
        (
        SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
        FROM COMBINATION_ITEM ci
        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
        ) AS discountedTotalPrice
        FROM COMBINATION c
        <where>
            <if test="bhType != null">
                AND c.BH_TYPE = #{bhType}
            </if>

            <if test="combinationId != null">
                <choose>
                    <!-- 인기순 -->
                    <when test="sort == 'popular'">
                        AND (
                        (c.LIKES < (SELECT c2.LIKES FROM COMBINATION c2 WHERE c2.COMBINATION_ID = #{combinationId}))
                        OR (
                        c.LIKES = (SELECT c2.LIKES FROM COMBINATION c2 WHERE c2.COMBINATION_ID = #{combinationId})
                        AND c.COMBINATION_ID > #{combinationId}
                        )
                        )
                    </when>

                    <!-- 최신순 -->
                    <when test="sort == 'latest'">
                        AND (
                        (c.CREATED_AT < (SELECT c2.CREATED_AT FROM COMBINATION c2 WHERE c2.COMBINATION_ID = #{combinationId}))
                        OR (
                        c.CREATED_AT = (SELECT c2.CREATED_AT FROM COMBINATION c2 WHERE c2.COMBINATION_ID = #{combinationId})
                        AND c.COMBINATION_ID > #{combinationId}
                        )
                        )
                    </when>

                    <!-- 낮은 가격순 -->
                    <when test="sort == 'lowPrice'">
                        AND (
                        (
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
                        )
                        >
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = #{combinationId}
                        )
                        )
                        OR (
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
                        )
                        =
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = #{combinationId}
                        )
                        AND c.COMBINATION_ID > #{combinationId}
                        )
                        )
                    </when>

                    <!-- 높은 가격순 -->
                    <when test="sort == 'highPrice'">
                        AND (
                        (
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
                        )
                        <
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = #{combinationId}
                        )
                        )
                        OR (
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = c.COMBINATION_ID
                        )
                        =
                        (SELECT SUM(ROUND(p.PRICE * (100 - p.DISCOUNT_RATE) / 100))
                        FROM COMBINATION_ITEM ci
                        JOIN PRODUCT p ON ci.PRODUCT_ID = p.PRODUCT_ID
                        WHERE ci.COMBINATION_ID = #{combinationId}
                        )
                        AND c.COMBINATION_ID > #{combinationId}
                        )
                        )
                    </when>
                </choose>
            </if>
        </where>

        <!-- 정렬 (무조건 tie-breaker ID 포함) -->
        <choose>
            <when test="sort == 'popular'">
                ORDER BY c.LIKES DESC, c.COMBINATION_ID ASC
            </when>
            <when test="sort == 'latest'">
                ORDER BY c.CREATED_AT DESC, c.COMBINATION_ID ASC
            </when>
            <when test="sort == 'lowPrice'">
                ORDER BY discountedTotalPrice ASC, c.COMBINATION_ID ASC
            </when>
            <when test="sort == 'highPrice'">
                ORDER BY discountedTotalPrice DESC, c.COMBINATION_ID ASC
            </when>
            <otherwise>
                ORDER BY c.CREATED_AT DESC, c.COMBINATION_ID ASC
            </otherwise>
        </choose>

        FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- productImages 따로 조회 -->
    <select id="findProductImagesByCombinationId" parameterType="long" resultType="string">
        SELECT pi.IMAGE_URL
        FROM COMBINATION_ITEM ci
                 JOIN PRODUCT_IMAGE pi ON ci.PRODUCT_ID = pi.PRODUCT_ID
        WHERE ci.COMBINATION_ID = #{combinationId}
          AND pi.IMAGE_ORDER = 1
    </select>

    <select id="countCombinations" resultType="long">
        SELECT COUNT(*) FROM COMBINATION
    </select>

</mapper>
