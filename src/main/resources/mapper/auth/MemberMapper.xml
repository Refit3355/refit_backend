<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.refit.app.domain.auth.mapper.MemberMapper">

  <!-- 신규 회원 기본정보 INSERT하는 쿼리 -->
  <insert id="insertBasic">
    INSERT INTO MEMBER (
    MEMBER_ID,
    EMAIL, NICKNAME, MEMBER_NAME, PASSWORD,
    ZIPCODE, ROAD_ADDRESS, DETAIL_ADDRESS,
    BIRTHDAY, PHONE_NUMBER, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY
    ) VALUES (
    SEQ_MEMBER.NEXTVAL,
    #{email}, #{nickName}, #{memberName}, #{passwordHash},
    #{zipcode}, #{roadAddress}, #{detailAddress},
    #{birthday, jdbcType=DATE}, #{phoneNumber}, SYSTIMESTAMP, 0, SYSTIMESTAMP, 0
    )
  </insert>

  <!-- 이메일로 MEMBER_ID 조회하는 쿼리 -->
  <select id="findIdByEmail" parameterType="string" resultType="long">
    SELECT MEMBER_ID FROM MEMBER WHERE EMAIL = #{email}
  </select>

  <!-- 이메일로 중복 여부 존재 확인하는 쿼리 -->
  <select id="existsByEmail" parameterType="string" resultType="boolean">
    SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END
    FROM MEMBER
    WHERE EMAIL = #{email}
  </select>

  <!-- 닉네임 중복 여부 확인하는 쿼리 -->
  <select id="existsByNickname" parameterType="string" resultType="boolean">
    SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END
    FROM MEMBER
    WHERE NICKNAME = #{nickname}
  </select>

  <!-- MEMBER 행을 MemberRowDto로 매핑 -->
  <resultMap id="MemberRowMap" type="com.refit.app.domain.auth.dto.MemberRowDto">
    <result column="MEMBER_ID" property="memberId"/>
    <result column="EMAIL" property="email"/>
    <result column="NICKNAME" property="nickname"/>
    <result column="MEMBER_NAME" property="memberName"/>
    <result column="PASSWORD" property="password"/>
  </resultMap>

  <!-- 이메일로 기본 회원 행을 조회하는 쿼리  -->
  <select id="findByEmail" resultMap="MemberRowMap">
    SELECT MEMBER_ID, EMAIL, NICKNAME, MEMBER_NAME, PASSWORD
    FROM MEMBER
    WHERE EMAIL = #{email}
    AND DELETED_AT IS NULL
  </select>

  <!-- HEALTH/HAIR/SIN 3개 서브 Dto를 포함하는 요약 매핑 -->
  <resultMap id="ConcernSummaryMap" type="com.refit.app.domain.auth.dto.ConcernSummaryDto">
    <association property="health" javaType="com.refit.app.domain.auth.dto.HealthInfoDto">
      <result column="EYE_HEALTH" property="eyeHealth"/>
      <result column="FATIGUE" property="fatigue"/>
      <result column="SLEEP_STRESS" property="sleepStress"/>
      <result column="IMMUNE_CARE" property="immuneCare"/>
      <result column="MUSCLE_HEALTH" property="muscleHealth"/>
      <result column="GUT_HEALTH" property="gutHealth"/>
      <result column="BLOOD_CIRCULATION" property="bloodCirculation"/>
    </association>

    <association property="hair" javaType="com.refit.app.domain.auth.dto.HairInfoDto">
      <result column="HAIR_LOSS" property="hairLoss"/>
      <result column="DAMAGED_HAIR" property="damagedHair"/>
      <result column="SCALP_TROUBLE" property="scalpTrouble"/>
      <result column="DANDRUFF" property="dandruff"/>
    </association>

    <association property="skin" javaType="com.refit.app.domain.auth.dto.SkinInfoDto">
      <result column="ATOPIC" property="atopic"/>
      <result column="ACNE" property="acne"/>
      <result column="WHITENING" property="whitening"/>
      <result column="SEBUM" property="sebum"/>
      <result column="INNER_DRYNESS" property="innerDryness"/>
      <result column="WRINKLES" property="wrinkles"/>
      <result column="ENLARGED_PORES" property="enlargedPores"/>
      <result column="REDNESS" property="redness"/>
      <result column="KERATIN" property="keratin"/>
    </association>
  </resultMap>

  <!-- 특정 MEMBER_ID에 대한 건강/헤어/스킨 요약값 한 번에 조회하는 쿼리 -->
  <select id="findHealthSummary" resultMap="ConcernSummaryMap">
    SELECT
    hc.EYE_HEALTH, hc.FATIGUE, hc.SLEEP_STRESS, hc.IMMUNE_CARE,
    hc.MUSCLE_HEALTH, hc.GUT_HEALTH, hc.BLOOD_CIRCULATION,
    hr.HAIR_LOSS, hr.DAMAGED_HAIR, hr.SCALP_TROUBLE, hr.DANDRUFF,
    sk.ATOPIC, sk.ACNE, sk.WHITENING, sk.SEBUM, sk.INNER_DRYNESS,
    sk.WRINKLES, sk.ENLARGED_PORES, sk.REDNESS, sk.KERATIN
    FROM MEMBER m
    LEFT JOIN HEALTH_CONCERN hc ON hc.MEMBER_ID = m.MEMBER_ID
    LEFT JOIN HAIR_CONCERN hr ON hr.MEMBER_ID = m.MEMBER_ID
    LEFT JOIN SKIN_CONCERN sk ON sk.MEMBER_ID = m.MEMBER_ID
    WHERE m.MEMBER_ID = #{memberId}
  </select>

  <!-- MEMBER_ID로 기본 회원 정보 조회하는 쿼리 -->
  <select id="findBasicById" parameterType="long"
    resultType="com.refit.app.domain.auth.dto.MemberRowDto">
    SELECT
    MEMBER_ID AS memberId,
    EMAIL AS email,
    NICKNAME AS nickname,
    MEMBER_NAME AS memberName,
    PASSWORD AS password
    FROM MEMBER
    WHERE MEMBER_ID = #{memberId}
    AND DELETED_AT IS NULL
  </select>

  <!-- 회원 기본 정보 선택적 UPDATE하는 쿼리 - 동적 SQL 사용 -->
  <update id="updateBasicById">
    UPDATE MEMBER
    <set>
      <if test="email != null and email != ''">
        EMAIL = #{email},
      </if>
      <if test="memberName != null and memberName != ''">
        MEMBER_NAME = #{memberName},
      </if>
      <if test="passwordHash != null and passwordHash != ''">
        PASSWORD = #{passwordHash},
      </if>
      <if test="zipcode != null">
        ZIPCODE = #{zipcode},
      </if>
      <if test="roadAddress != null and roadAddress != ''">
        ROAD_ADDRESS = #{roadAddress},
      </if>
      <if test="detailAddress != null and detailAddress != ''">
        DETAIL_ADDRESS = #{detailAddress},
      </if>
      <if test="birthday != null">
        BIRTHDAY = #{birthday, jdbcType=DATE},
      </if>
      <if test="phoneNumber != null and phoneNumber != ''">
        PHONE_NUMBER = #{phoneNumber},
      </if>
      UPDATED_AT = SYSTIMESTAMP,
      UPDATED_BY = #{memberId}
    </set>
    WHERE MEMBER_ID = #{memberId}
    AND DELETED_AT IS NULL
  </update>

  <!-- 카카오 로그인 유저인지 확인하는 쿼리 -->
  <select id="findIdByOauthId" parameterType="string" resultType="long">
    SELECT MEMBER_ID
    FROM MEMBER
    WHERE OAUTH_ID = #{oauthId}
    AND DELETED_AT IS NULL
  </select>

  <!-- MEMBER 테이블에 OAUTH_ID 연결/갱신하는 쿼리 -->
  <update id="updateOauthIdByMemberId">
    UPDATE MEMBER
    SET OAUTH_ID = #{oauthId},
    UPDATED_AT = SYSTIMESTAMP,
    UPDATED_BY = #{memberId}
    WHERE MEMBER_ID = #{memberId}
    AND DELETED_AT IS NULL
  </update>
</mapper>