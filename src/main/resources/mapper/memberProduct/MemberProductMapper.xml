<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.refit.app.domain.memberProduct.mapper.MemberProductMapper">

  <!-- PRODUCT 기본 정보 조회 -->
  <select id="findProductSimple" parameterType="long"
    resultType="com.refit.app.domain.memberProduct.dto.ProductSimpleRow">
    SELECT
      p.PRODUCT_ID         AS productId,
      p.PRODUCT_NAME       AS productName,
      p.BRAND_NAME         AS brandName,
      p.RECOMMENDED_PERIOD AS recommendedPeriod,
      p.BH_TYPE            AS bhType,
      p.CATEGORY_ID        AS categoryId
    FROM PRODUCT p
    WHERE p.PRODUCT_ID = #{productId}
      AND p.DELETED_AT IS NULL
  </select>

  <insert id="insertMemberProduct">
    <selectKey keyProperty="_lastInsertedId" resultType="long" order="BEFORE">
      SELECT SEQ_MEMBER_PRODUCT.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO MEMBER_PRODUCT (
      MEMBER_PRODUCT_ID,
      MEMBER_ID,
      PRODUCT_ID,
      ORDER_ITEM_ID,
      START_DATE,
      RECOMMENDED_EXPIRATION_DATE,
      USAGE_STATUS,
      PRODUCT_NAME,
      BRAND_NAME,
      COMPLETED_DATE,
      BH_TYPE,
      CATEGORY_ID,
      CREATED_AT,
      CREATED_BY,
      UPDATED_AT,
      UPDATED_BY
    ) VALUES (
      #{_lastInsertedId},
      #{memberId},
      #{productId, jdbcType=NUMERIC},
      NULL,
      #{startDate, jdbcType=DATE},
      #{recommendedExpirationDate},
      #{usageStatus},
      #{productName},
      #{brandName},
      NULL,
      #{type},
      #{categoryId},
      SYSTIMESTAMP,
      #{memberId},
      SYSTIMESTAMP,
      #{memberId}
    )
  </insert>

  <!-- MEMBER_PRODUCT + MEMBER_PRODUCT_EFFECT를 한 번의 호출로 처리 (동일 세션) -->
  <insert id="insertMemberProductWithEffects"
    parameterType="map"
    statementType="PREPARED">
    DECLARE
    v_mp_id NUMBER;
    BEGIN
    -- 1) MEMBER_PRODUCT INSERT + RETURNING
    INSERT INTO MEMBER_PRODUCT (
      MEMBER_PRODUCT_ID,
      MEMBER_ID,
      PRODUCT_ID,
      BH_TYPE,
      CATEGORY_ID,
      START_DATE,
      RECOMMENDED_EXPIRATION_DATE,
      USAGE_STATUS,
      PRODUCT_NAME,
      BRAND_NAME,
      COMPLETED_DATE,
      CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY
    ) VALUES (
      SEQ_MEMBER_PRODUCT.NEXTVAL,
      #{memberId},
      #{productId, jdbcType=NUMERIC},           --  null 가능 시 jdbcType 명시
      #{type},
      #{categoryId, jdbcType=NUMERIC},
      #{startDate, jdbcType=DATE},
      #{recommendedExpirationDate},
      #{usageStatus},
      #{productName},
      #{brandName},
      NULL,
      SYSTIMESTAMP, #{memberId}, SYSTIMESTAMP, #{memberId}
    )
    RETURNING MEMBER_PRODUCT_ID INTO v_mp_id;

    -- 2) EFFECT 리스트 다건 INSERT (같은 블록/세션)
    <if test="effectIds != null and effectIds.size() > 0">
      <foreach collection="effectIds" item="eid">
        INSERT INTO MEMBER_PRODUCT_EFFECT (
          MEMBER_PRODUCT_EFFECT_ID,
          MEMBER_PRODUCT_ID,
          EFFECT_ID,
          CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY
        ) VALUES (
          SEQ_MEMBER_PRODUCT_EFFECT.NEXTVAL,
          v_mp_id,
          #{eid},
          SYSTIMESTAMP, #{memberId}, SYSTIMESTAMP, #{memberId}
        );
      </foreach>
    </if>
    END;
  </insert>


  <resultMap id="MemberProductDetailResponseMap"
    type="com.refit.app.domain.memberProduct.dto.response.MemberProductDetailResponse">
    <id     property="memberProductId"   column="memberProductId"/>
    <result property="brandName"         column="brandName"/>
    <result property="productName"       column="productName"/>
    <result property="categoryName"      column="categoryName"/>
    <result property="productId"         column="productId"/>
    <result property="status"            column="status"
      javaType="com.refit.app.domain.memberProduct.model.UsageStatus"
      jdbcType="NUMERIC"
      typeHandler="com.refit.app.global.util.UsageStatusTypeHandler"/>
    <result property="recommendedPeriod" column="recommendedPeriod"/>
    <result property="startDate"         column="startDate"/>
    <result property="expiryDate"        column="expiryDate"/>
    <result property="daysRemaining"     column="daysRemaining"/>
    <result property="displayRemaining"  column="displayRemaining"/>
    <result property="usagePeriodText"   column="usagePeriodText"/>
    <result property="effects"
      column="effectNames"
      javaType="java.util.List"
      typeHandler="com.refit.app.global.util.StringListTypeHandler"/>
    <result column="thumbnailUrl" property="thumbnailUrl" jdbcType="VARCHAR"/>
  </resultMap>

  <select id="selectMemberProducts" resultMap="MemberProductDetailResponseMap">
    SELECT
    mp.MEMBER_PRODUCT_ID                                   AS memberProductId,
    mp.BRAND_NAME                                          AS brandName,
    mp.PRODUCT_NAME                                        AS productName,
    c.CATEGORY_NAME                                        AS categoryName,
    mp.PRODUCT_ID                                          AS productId,
    mp.USAGE_STATUS                                        AS status,
    mp.RECOMMENDED_EXPIRATION_DATE                         AS recommendedPeriod,
    TO_CHAR(mp.START_DATE, 'YYYY-MM-DD')                   AS startDate,
    TO_CHAR(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE, 'YYYY-MM-DD') AS expiryDate,
    (TRUNC(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE) - TRUNC(SYSDATE)) AS daysRemaining,
    CASE
    WHEN (TRUNC(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE) - TRUNC(SYSDATE)) > 0
    THEN 'D-' || (TRUNC(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE) - TRUNC(SYSDATE))
    WHEN (TRUNC(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE) - TRUNC(SYSDATE)) = 0
    THEN 'D-day'
    ELSE 'D+' || ABS(TRUNC(mp.START_DATE + mp.RECOMMENDED_EXPIRATION_DATE) - TRUNC(SYSDATE))
    END                                                    AS displayRemaining,
    CASE
    WHEN mp.USAGE_STATUS = 2 AND mp.COMPLETED_DATE IS NOT NULL THEN
    TO_CHAR(mp.START_DATE, 'YYYY-MM-DD')
    || ' ~ '
    || TO_CHAR(mp.COMPLETED_DATE, 'YYYY-MM-DD')
    || ' (총 '
    || (TRUNC(mp.COMPLETED_DATE) - TRUNC(mp.START_DATE) + 1)
    || '일)'
    ELSE NULL
    END                                                    AS usagePeriodText,
    COALESCE(mpe_agg.mpEffectNames, pe_agg.prodEffectNames) AS effectNames,
    p.THUMBNAIL_URL                                         AS thumbnailUrl

    FROM MEMBER_PRODUCT mp
    LEFT JOIN PRODUCT p
        ON p.PRODUCT_ID = mp.PRODUCT_ID
        AND p.DELETED_AT IS NULL
    LEFT JOIN CATEGORY c
        ON c.CATEGORY_ID = mp.CATEGORY_ID

    /* MEMBER_PRODUCT_EFFECT 집계 */
    LEFT JOIN (
        SELECT
            mpe.MEMBER_PRODUCT_ID,
            LISTAGG(DISTINCT e.EFFECT_NAME, ', ') WITHIN GROUP (ORDER BY e.EFFECT_NAME) AS mpEffectNames
        FROM MEMBER_PRODUCT_EFFECT mpe
        JOIN EFFECT e
            ON e.EFFECT_ID = mpe.EFFECT_ID
            AND e.DELETED_AT IS NULL
        GROUP BY mpe.MEMBER_PRODUCT_ID
    ) mpe_agg
        ON mpe_agg.MEMBER_PRODUCT_ID = mp.MEMBER_PRODUCT_ID

    /* PRODUCT_EFFECT 집계 (product_id 있을 때 대비) */
    LEFT JOIN (
        SELECT
            pe.PRODUCT_ID,
            LISTAGG(DISTINCT e.EFFECT_NAME, ', ') WITHIN GROUP (ORDER BY e.EFFECT_NAME) AS prodEffectNames
        FROM PRODUCT_EFFECT pe
        JOIN EFFECT e
            ON e.EFFECT_ID = pe.EFFECT_ID
            AND e.DELETED_AT IS NULL
        GROUP BY pe.PRODUCT_ID
    ) pe_agg
        ON pe_agg.PRODUCT_ID = mp.PRODUCT_ID

    WHERE mp.MEMBER_ID = #{memberId}
        AND mp.DELETED_AT IS NULL
        AND mp.BH_TYPE = #{bhType}
    <if test="statusCode != null">
      AND mp.USAGE_STATUS = #{statusCode}
    </if>
    ORDER BY mp.UPDATED_AT DESC, mp.CREATED_AT DESC
  </select>

  <update id="softDeleteMemberProduct">
    UPDATE MEMBER_PRODUCT
      SET DELETED_AT = SYSTIMESTAMP,
          DELETED_BY = #{memberId},
          UPDATED_AT = SYSTIMESTAMP,
          UPDATED_BY = #{memberId}
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
      AND MEMBER_ID = #{memberId}
      AND DELETED_AT IS NULL
  </update>

  <update id="markCompleted">
    UPDATE MEMBER_PRODUCT
      SET USAGE_STATUS = 2,
          COMPLETED_DATE = TRUNC(SYSDATE),
          UPDATED_AT = SYSTIMESTAMP,
          UPDATED_BY = #{memberId}
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
      AND MEMBER_ID = #{memberId}
      AND DELETED_AT IS NULL
      AND USAGE_STATUS != 2
  </update>

  <update id="markUsing">
    UPDATE MEMBER_PRODUCT
        SET USAGE_STATUS = 1,
            COMPLETED_DATE = NULL,
            UPDATED_AT = SYSTIMESTAMP,
            UPDATED_BY = #{memberId}
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
      AND MEMBER_ID = #{memberId}
      AND DELETED_AT IS NULL
      AND USAGE_STATUS != 1
  </update>

  <select id="findMemberProductMeta"
    resultType="com.refit.app.domain.memberProduct.dto.MetaRow">
    SELECT
        mp.MEMBER_PRODUCT_ID AS memberProductId,
        mp.PRODUCT_ID        AS productId,
        mp.USAGE_STATUS      AS usageStatus
    FROM MEMBER_PRODUCT mp
    WHERE mp.MEMBER_PRODUCT_ID = #{memberProductId}
        AND mp.MEMBER_ID = #{memberId}
        AND mp.DELETED_AT IS NULL
  </select>

  <update id="updateInAppMemberProduct">
    UPDATE MEMBER_PRODUCT
    <set>
      <if test="recommendedPeriod != null">
        RECOMMENDED_EXPIRATION_DATE = #{recommendedPeriod},
      </if>
      <if test="startDate != null and startDate != ''">
        START_DATE = TO_DATE(#{startDate}, 'YYYY-MM-DD'),
      </if>
      UPDATED_AT = SYSTIMESTAMP,
      UPDATED_BY = #{memberId}
    </set>
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
        AND MEMBER_ID = #{memberId}
        AND PRODUCT_ID IS NOT NULL
        AND DELETED_AT IS NULL
        AND USAGE_STATUS = 1
  </update>

  <update id="updateExternalMemberProduct">
    UPDATE MEMBER_PRODUCT
    <set>
      <if test="productName != null and productName != ''">
        PRODUCT_NAME = #{productName},
      </if>
      <if test="brandName != null and brandName != ''">
        BRAND_NAME = #{brandName},
      </if>
      <if test="categoryId != null">
        CATEGORY_ID = #{categoryId},
      </if>
      <if test="recommendedPeriod != null">
        RECOMMENDED_EXPIRATION_DATE = #{recommendedPeriod},
      </if>
      <if test="startDate != null and startDate != ''">
        START_DATE = TO_DATE(#{startDate}, 'YYYY-MM-DD'),
      </if>
      UPDATED_AT = SYSTIMESTAMP,
      UPDATED_BY = #{memberId}
    </set>
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
        AND MEMBER_ID = #{memberId}
        AND PRODUCT_ID IS NULL
        AND DELETED_AT IS NULL
        AND USAGE_STATUS = 1
  </update>

  <delete id="deleteAllEffects">
    DELETE FROM MEMBER_PRODUCT_EFFECT
    WHERE MEMBER_PRODUCT_ID = #{memberProductId}
  </delete>

  <insert id="insertEffect">
    INSERT INTO MEMBER_PRODUCT_EFFECT (
        MEMBER_PRODUCT_EFFECT_ID, MEMBER_PRODUCT_ID, EFFECT_ID,
        CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY
    ) VALUES (
         SEQ_MEMBER_PRODUCT_EFFECT.NEXTVAL, #{memberProductId}, #{effectId},
         SYSTIMESTAMP, #{memberId}, SYSTIMESTAMP, #{memberId}
    )
  </insert>

  <insert id="insertMemberProductFromOrderItem">
    <selectKey keyProperty="_lastInsertedId" resultType="long" order="BEFORE">
      SELECT SEQ_MEMBER_PRODUCT.NEXTVAL FROM DUAL
    </selectKey>

    INSERT INTO MEMBER_PRODUCT (
        MEMBER_PRODUCT_ID,
        MEMBER_ID,
        PRODUCT_ID,
        ORDER_ITEM_ID,
        START_DATE,
        RECOMMENDED_EXPIRATION_DATE,
        USAGE_STATUS,
        PRODUCT_NAME,
        BRAND_NAME,
        COMPLETED_DATE,
        BH_TYPE,
        CATEGORY_ID,
        CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY
    )
    SELECT
        #{_lastInsertedId},
        #{memberId},
        p.PRODUCT_ID,
        oi.ORDER_ITEM_ID,
        SYSDATE,                                 -- DATE
        p.RECOMMENDED_PERIOD,
        1,                                       -- USING
        p.PRODUCT_NAME,
        p.BRAND_NAME,
        NULL,
        p.BH_TYPE,
        p.CATEGORY_ID,
        SYSTIMESTAMP, #{memberId}, SYSTIMESTAMP, #{memberId}
    FROM ORDER_ITEM oi
    JOIN ORDERS  o ON o.ORDER_ID   = oi.ORDER_ID
    JOIN PRODUCT p ON p.PRODUCT_ID = oi.PRODUCT_ID
    WHERE oi.ORDER_ITEM_ID = #{orderItemId}
        AND o.MEMBER_ID      = #{memberId}
        AND NOT EXISTS (
        SELECT 1
        FROM MEMBER_PRODUCT mp
        WHERE mp.ORDER_ITEM_ID = oi.ORDER_ITEM_ID
        AND mp.DELETED_AT IS NULL
        )
  </insert>

</mapper>